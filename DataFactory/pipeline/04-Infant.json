{
  "name": "04-Infant",
  "properties": {
    "description": "ADF.procfwk infant pipeline used to check when the processing pipeline called by the Child completes and passes the resulting status back to the metadata database.",
    "activities": [
      {
        "name": "Execute Worker Pipeline",
        "description": "The lowest level executor with the metadata framework to call existing processing pipelines within Data Factory. The function called will block processing and wait for an outcome.",
        "type": "AzureFunctionActivity",
        "dependsOn": [
          {
            "activity": "Log Pipeline Running",
            "dependencyConditions": [
              "Succeeded"
            ]
          },
          {
            "activity": "Get Pipeline Params",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ],
        "policy": {
          "timeout": "0.00:10:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureOutput": false,
          "secureInput": true
        },
        "userProperties": [],
        "typeProperties": {
          "functionName": "ExecutePipeline",
          "method": "POST",
          "body": {
            "value": "@concat('\n{\n\t\"tenantId\": \"',variables('WorkerTenantId'),'\",\n\t\"applicationId\": \"',variables('WorkerAppId'),'\",\n\t\"authenticationKey\": \"',variables('WorkerAppSecret'),'\",\n\t\"subscriptionId\": \"',variables('WorkerSubscriptionId'),'\",\n\t\"resourceGroup\": \"',variables('WorkerResourceGroup'),'\",\n\t\"factoryName\": \"',variables('WorkerDataFactoryName'),'\",\n\t\"pipelineName\": \"',variables('WorkerPipelineName'),'\"',activity('Get Pipeline Params').output.firstRow.Params,'\n}')",
            "type": "Expression"
          }
        },
        "linkedServiceName": {
          "referenceName": "FrameworkFunctions",
          "type": "LinkedServiceReference"
        }
      },
      {
        "name": "Get Pipeline Params",
        "description": "Returns any parameters from metadata required for the processing pipeline being called. The output can be an empty string if no parameters are required.",
        "type": "Lookup",
        "dependsOn": [],
        "policy": {
          "timeout": "0.00:10:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureOutput": false,
          "secureInput": false
        },
        "userProperties": [],
        "typeProperties": {
          "source": {
            "type": "AzureSqlSource",
            "sqlReaderStoredProcedureName": "[procfwk].[GetPipelineParameters]",
            "storedProcedureParameters": {
              "PipelineId": {
                "type": "Int32",
                "value": {
                  "value": "@pipeline().parameters.pipelineId",
                  "type": "Expression"
                }
              }
            },
            "queryTimeout": "02:00:00",
            "partitionOption": "None"
          },
          "dataset": {
            "referenceName": "GetSetMetadata",
            "type": "DatasetReference"
          }
        }
      },
      {
        "name": "Log Pipeline Running",
        "description": "Sets the current pipeline with a status of running within the current execution database table.",
        "type": "SqlServerStoredProcedure",
        "dependsOn": [
          {
            "activity": "Is Target Worker Validate",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ],
        "policy": {
          "timeout": "0.00:10:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureOutput": false,
          "secureInput": false
        },
        "userProperties": [],
        "typeProperties": {
          "storedProcedureName": "[procfwk].[SetLogPipelineRunning]",
          "storedProcedureParameters": {
            "ExecutionId": {
              "value": {
                "value": "@pipeline().parameters.ExecutionId",
                "type": "Expression"
              },
              "type": "Guid"
            },
            "PipelineId": {
              "value": {
                "value": "@pipeline().parameters.pipelineId",
                "type": "Expression"
              },
              "type": "Int32"
            },
            "StageId": {
              "value": {
                "value": "@pipeline().parameters.StageId",
                "type": "Expression"
              },
              "type": "Int32"
            }
          }
        },
        "linkedServiceName": {
          "referenceName": "SupportDatabase",
          "type": "LinkedServiceReference"
        }
      },
      {
        "name": "Get Worker Authentication Details",
        "description": "Return the SPN ID and Secret for the worker pipeline being executed. Called at this level as each pipeline can have a different SPN.",
        "type": "Lookup",
        "dependsOn": [],
        "policy": {
          "timeout": "0.00:10:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureOutput": true,
          "secureInput": false
        },
        "userProperties": [],
        "typeProperties": {
          "source": {
            "type": "AzureSqlSource",
            "sqlReaderStoredProcedureName": "[procfwk].[GetWorkerAuthDetails]",
            "storedProcedureParameters": {
              "ExecutionId": {
                "type": "Guid",
                "value": {
                  "value": "@pipeline().parameters.executionId",
                  "type": "Expression"
                }
              },
              "PipelineId": {
                "type": "Int32",
                "value": {
                  "value": "@pipeline().parameters.pipelineId",
                  "type": "Expression"
                }
              },
              "StageId": {
                "type": "Int32",
                "value": {
                  "value": "@pipeline().parameters.stageId",
                  "type": "Expression"
                }
              }
            },
            "queryTimeout": "02:00:00",
            "partitionOption": "None"
          },
          "dataset": {
            "referenceName": "GetSetMetadata",
            "type": "DatasetReference"
          }
        }
      },
      {
        "name": "Log Execute Function Activity Failure",
        "description": "Handle true failures from calling out to the Azure Function and update the current execution table accordingly so a restart can occur.",
        "type": "SqlServerStoredProcedure",
        "dependsOn": [
          {
            "activity": "Execute Worker Pipeline",
            "dependencyConditions": [
              "Failed"
            ]
          }
        ],
        "policy": {
          "timeout": "0.00:10:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureOutput": false,
          "secureInput": false
        },
        "userProperties": [],
        "typeProperties": {
          "storedProcedureName": "[procfwk].[SetLogActivityFailed]",
          "storedProcedureParameters": {
            "ExecutionId": {
              "value": {
                "value": "@pipeline().parameters.ExecutionId",
                "type": "Expression"
              },
              "type": "Guid"
            },
            "PipelineId": {
              "value": {
                "value": "@pipeline().parameters.pipelineId",
                "type": "Expression"
              },
              "type": "Int32"
            },
            "StageId": {
              "value": {
                "value": "@pipeline().parameters.StageId",
                "type": "Expression"
              },
              "type": "Int32"
            },
            "CallingActivity": {
              "value": "ExecuteWorkerPipeline",
              "type": "String"
            }
          }
        },
        "linkedServiceName": {
          "referenceName": "SupportDatabase",
          "type": "LinkedServiceReference"
        }
      },
      {
        "name": "Update Run Id",
        "description": "Provide the actual ADF run ID back to the current execution table for long term logging and alignment between the metadata other Azure monitoring tools.",
        "type": "SqlServerStoredProcedure",
        "dependsOn": [
          {
            "activity": "Set Run Id",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ],
        "policy": {
          "timeout": "0.00:10:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureOutput": false,
          "secureInput": false
        },
        "userProperties": [],
        "typeProperties": {
          "storedProcedureName": "[procfwk].[SetLogPipelineRunId]",
          "storedProcedureParameters": {
            "ExecutionId": {
              "value": {
                "value": "@pipeline().parameters.ExecutionId",
                "type": "Expression"
              },
              "type": "Guid"
            },
            "PipelineId": {
              "value": {
                "value": "@pipeline().parameters.pipelineId",
                "type": "Expression"
              },
              "type": "Int32"
            },
            "RunId": {
              "value": {
                "value": "@variables('WorkerRunId')",
                "type": "Expression"
              },
              "type": "Guid"
            },
            "StageId": {
              "value": {
                "value": "@pipeline().parameters.StageId",
                "type": "Expression"
              },
              "type": "Int32"
            }
          }
        },
        "linkedServiceName": {
          "referenceName": "SupportDatabase",
          "type": "LinkedServiceReference"
        }
      },
      {
        "name": "Check For Alerts",
        "description": "Checks the properties tables and if any recipients in the database require alerts sending for the current pipeline ID.",
        "type": "Lookup",
        "dependsOn": [
          {
            "activity": "Update Run Id",
            "dependencyConditions": [
              "Succeeded"
            ]
          },
          {
            "activity": "Set Pipeline Result",
            "dependencyConditions": [
              "Completed"
            ]
          }
        ],
        "policy": {
          "timeout": "0.00:10:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureOutput": false,
          "secureInput": false
        },
        "userProperties": [],
        "typeProperties": {
          "source": {
            "type": "AzureSqlSource",
            "sqlReaderStoredProcedureName": "[procfwk].[CheckForEmailAlerts]",
            "storedProcedureParameters": {
              "PipelineId": {
                "type": "Int32",
                "value": {
                  "value": "@pipeline().parameters.pipelineId",
                  "type": "Expression"
                }
              }
            },
            "queryTimeout": "02:00:00",
            "partitionOption": "None"
          },
          "dataset": {
            "referenceName": "GetSetMetadata",
            "type": "DatasetReference"
          },
          "firstRowOnly": true
        }
      },
      {
        "name": "Send Alerts",
        "description": "True = alerts need sending.\nFalse = do nothing.",
        "type": "IfCondition",
        "dependsOn": [
          {
            "activity": "Check For Alerts",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ],
        "userProperties": [],
        "typeProperties": {
          "expression": {
            "value": "@activity('Check For Alerts').output.firstRow.SendAlerts",
            "type": "Expression"
          },
          "ifTrueActivities": [
            {
              "name": "Get Email Parts",
              "description": "Return all required content from the metadata database to send an email alerting using the procfwk. The lookup returns the exact content for the function body request.",
              "type": "Lookup",
              "dependsOn": [],
              "policy": {
                "timeout": "0.00:10:00",
                "retry": 0,
                "retryIntervalInSeconds": 30,
                "secureOutput": true,
                "secureInput": false
              },
              "userProperties": [],
              "typeProperties": {
                "source": {
                  "type": "AzureSqlSource",
                  "sqlReaderStoredProcedureName": "[procfwk].[GetEmailAlertParts]",
                  "storedProcedureParameters": {
                    "PipelineId": {
                      "type": "Int32",
                      "value": {
                        "value": "@pipeline().parameters.pipelineId",
                        "type": "Expression"
                      }
                    }
                  },
                  "queryTimeout": "02:00:00",
                  "partitionOption": "None"
                },
                "dataset": {
                  "referenceName": "GetSetMetadata",
                  "type": "DatasetReference"
                },
                "firstRowOnly": true
              }
            },
            {
              "name": "Send Email",
              "type": "ExecutePipeline",
              "dependsOn": [
                {
                  "activity": "Get Email Parts",
                  "dependencyConditions": [
                    "Succeeded"
                  ]
                }
              ],
              "userProperties": [],
              "typeProperties": {
                "pipeline": {
                  "referenceName": "Email Sender",
                  "type": "PipelineReference"
                },
                "waitOnCompletion": true,
                "parameters": {
                  "Recipients": {
                    "value": "@activity('Get Email Parts').output.firstRow.emailRecipients",
                    "type": "Expression"
                  },
                  "CcRecipients": {
                    "value": "@activity('Get Email Parts').output.firstRow.emailCcRecipients",
                    "type": "Expression"
                  },
                  "BccRecipients": {
                    "value": "@activity('Get Email Parts').output.firstRow.emailBccRecipients",
                    "type": "Expression"
                  },
                  "Subject": {
                    "value": "@activity('Get Email Parts').output.firstRow.emailSubject",
                    "type": "Expression"
                  },
                  "Body": {
                    "value": "@activity('Get Email Parts').output.firstRow.emailBody",
                    "type": "Expression"
                  },
                  "Importance": {
                    "value": "@activity('Get Email Parts').output.firstRow.emailImportance",
                    "type": "Expression"
                  }
                }
              }
            }
          ]
        }
      },
      {
        "name": "Wait Until Pipeline Completes",
        "description": "Loops until the Worker pipeline called completes.\n\nSimple status:\n- Running = new iteration.\n- Done = break.",
        "type": "Until",
        "dependsOn": [
          {
            "activity": "Get Wait Duration",
            "dependencyConditions": [
              "Succeeded"
            ]
          },
          {
            "activity": "Execute Worker Pipeline",
            "dependencyConditions": [
              "Succeeded"
            ]
          },
          {
            "activity": "Set Run Id",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ],
        "userProperties": [],
        "typeProperties": {
          "expression": {
            "value": "@variables('WorkerPipelineState')",
            "type": "Expression"
          },
          "activities": [
            {
              "name": "Get Worker Pipeline Status",
              "description": "Checks the status of a given processing pipeline and provides the value for the downstream framework activities to act upon.",
              "type": "AzureFunctionActivity",
              "dependsOn": [],
              "policy": {
                "timeout": "0.00:10:00",
                "retry": 0,
                "retryIntervalInSeconds": 30,
                "secureOutput": false,
                "secureInput": true
              },
              "userProperties": [],
              "typeProperties": {
                "functionName": "CheckPipelineStatus",
                "method": "POST",
                "body": {
                  "value": "@concat('\n{\n    \"tenantId\": \"',variables('WorkerTenantId'),'\",\n    \"applicationId\": \"',variables('WorkerAppId'),'\",\n    \"authenticationKey\": \"',variables('WorkerAppSecret'),'\",\n    \"subscriptionId\": \"',variables('WorkerSubscriptionId'),'\",\n    \"resourceGroup\": \"',variables('WorkerResourceGroup'),'\",\n    \"factoryName\": \"',variables('WorkerDataFactoryName'),'\",\n    \"pipelineName\": \"',variables('WorkerPipelineName'),'\",\n    \"runId\": \"',variables('WorkerRunId'),'\"\n}')",
                  "type": "Expression"
                }
              },
              "linkedServiceName": {
                "referenceName": "FrameworkFunctions",
                "type": "LinkedServiceReference"
              }
            },
            {
              "name": "Wait If Running",
              "description": "True = Do nothing.\nFalse = Wait, before the next iteration.",
              "type": "IfCondition",
              "dependsOn": [
                {
                  "activity": "Set Worker State",
                  "dependencyConditions": [
                    "Succeeded"
                  ]
                }
              ],
              "userProperties": [],
              "typeProperties": {
                "expression": {
                  "value": "@variables('WorkerPipelineState')",
                  "type": "Expression"
                },
                "ifFalseActivities": [
                  {
                    "name": "Wait for Pipeline",
                    "description": "The processing pipeline is still running so Wait before checking its status again.",
                    "type": "Wait",
                    "dependsOn": [],
                    "userProperties": [],
                    "typeProperties": {
                      "waitTimeInSeconds": {
                        "value": "@activity('Get Wait Duration').output.firstRow.PropertyValue",
                        "type": "Expression"
                      }
                    }
                  }
                ]
              }
            },
            {
              "name": "Set Last Check DateTime",
              "description": "Update the current execution table with a date time from when the Worker pipeline status was last checked as part of the Until iterations.",
              "type": "SqlServerStoredProcedure",
              "dependsOn": [
                {
                  "activity": "Get Worker Pipeline Status",
                  "dependencyConditions": [
                    "Succeeded"
                  ]
                }
              ],
              "policy": {
                "timeout": "0.00:10:00",
                "retry": 0,
                "retryIntervalInSeconds": 30,
                "secureOutput": false,
                "secureInput": false
              },
              "userProperties": [],
              "typeProperties": {
                "storedProcedureName": "[procfwk].[SetLogPipelineLastStatusCheck]",
                "storedProcedureParameters": {
                  "ExecutionId": {
                    "value": {
                      "value": "@pipeline().parameters.executionId",
                      "type": "Expression"
                    },
                    "type": "Guid"
                  },
                  "PipelineId": {
                    "value": {
                      "value": "@pipeline().parameters.pipelineId",
                      "type": "Expression"
                    },
                    "type": "Int32"
                  },
                  "StageId": {
                    "value": {
                      "value": "@pipeline().parameters.stageId",
                      "type": "Expression"
                    },
                    "type": "Int32"
                  }
                }
              },
              "linkedServiceName": {
                "referenceName": "SupportDatabase",
                "type": "LinkedServiceReference"
              }
            },
            {
              "name": "Log Check Function Activity Failure",
              "description": "Report to the current execution table that the framework pipeline activity has failed. This failure is outside of the scope of the framework and is probably related to a wider platform problem.",
              "type": "SqlServerStoredProcedure",
              "dependsOn": [
                {
                  "activity": "Get Worker Pipeline Status",
                  "dependencyConditions": [
                    "Failed"
                  ]
                }
              ],
              "policy": {
                "timeout": "0.00:10:00",
                "retry": 0,
                "retryIntervalInSeconds": 30,
                "secureOutput": false,
                "secureInput": false
              },
              "userProperties": [],
              "typeProperties": {
                "storedProcedureName": "[procfwk].[SetLogActivityFailed]",
                "storedProcedureParameters": {
                  "CallingActivity": {
                    "value": "GetWorkerPipelineStatus",
                    "type": "String"
                  },
                  "ExecutionId": {
                    "value": {
                      "value": "@pipeline().parameters.executionId",
                      "type": "Expression"
                    },
                    "type": "Guid"
                  },
                  "PipelineId": {
                    "value": {
                      "value": "@pipeline().parameters.pipelineId",
                      "type": "Expression"
                    },
                    "type": "Int32"
                  },
                  "StageId": {
                    "value": {
                      "value": "@pipeline().parameters.stageId",
                      "type": "Expression"
                    },
                    "type": "Int32"
                  }
                }
              },
              "linkedServiceName": {
                "referenceName": "SupportDatabase",
                "type": "LinkedServiceReference"
              }
            },
            {
              "name": "Set Worker State",
              "description": "Set the bool state of the Worker pipeline to be used by the Until and If expressions. True = Complete, False = Running.",
              "type": "SetVariable",
              "dependsOn": [
                {
                  "activity": "Get Worker Pipeline Status",
                  "dependencyConditions": [
                    "Succeeded"
                  ]
                }
              ],
              "userProperties": [],
              "typeProperties": {
                "variableName": "WorkerPipelineState",
                "value": {
                  "value": "@equals('Done',activity('Get Worker Pipeline Status').output.SimpleStatus)",
                  "type": "Expression"
                }
              }
            }
          ],
          "timeout": "0.00:10:00"
        }
      },
      {
        "name": "Set Pipeline Result",
        "description": "Receives the outcome from the function execution for a given processing pipeline and updates the current execution table with different pipelines status values depending on the result (case).",
        "type": "Switch",
        "dependsOn": [
          {
            "activity": "Wait Until Pipeline Completes",
            "dependencyConditions": [
              "Completed"
            ]
          }
        ],
        "userProperties": [],
        "typeProperties": {
          "on": {
            "value": "@activity('Get Worker Pipeline Status').output.Status",
            "type": "Expression"
          },
          "cases": [
            {
              "value": "Succeeded",
              "activities": [
                {
                  "name": "Pipeline Status Succeeded",
                  "description": "Updates the current execution table with a pipeline status of success if the function outcome is succeeded.",
                  "type": "SqlServerStoredProcedure",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "storedProcedureName": "[procfwk].[SetLogPipelineSuccess]",
                    "storedProcedureParameters": {
                      "ExecutionId": {
                        "value": {
                          "value": "@pipeline().parameters.executionId",
                          "type": "Expression"
                        },
                        "type": "Guid"
                      },
                      "PipelineId": {
                        "value": {
                          "value": "@pipeline().parameters.pipelineId",
                          "type": "Expression"
                        },
                        "type": "Int32"
                      },
                      "StageId": {
                        "value": {
                          "value": "@pipeline().parameters.stageId",
                          "type": "Expression"
                        },
                        "type": "Int32"
                      }
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "SupportDatabase",
                    "type": "LinkedServiceReference"
                  }
                }
              ]
            },
            {
              "value": "Failed",
              "activities": [
                {
                  "name": "Pipeline Status Failed",
                  "description": "Updates the current execution table with a pipeline status of failed if the function outcome is failed. Also blocks pipelines in the downstream execution stage.",
                  "type": "SqlServerStoredProcedure",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "storedProcedureName": "[procfwk].[SetLogPipelineFailed]",
                    "storedProcedureParameters": {
                      "ExecutionId": {
                        "value": {
                          "value": "@pipeline().parameters.executionId",
                          "type": "Expression"
                        },
                        "type": "Guid"
                      },
                      "PipelineId": {
                        "value": {
                          "value": "@pipeline().parameters.pipelineId",
                          "type": "Expression"
                        },
                        "type": "Int32"
                      },
                      "RunId": {
                        "value": {
                          "value": "@variables('WorkerRunId')",
                          "type": "Expression"
                        },
                        "type": "Guid"
                      },
                      "StageId": {
                        "value": {
                          "value": "@pipeline().parameters.stageId",
                          "type": "Expression"
                        },
                        "type": "Int32"
                      }
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "SupportDatabase",
                    "type": "LinkedServiceReference"
                  }
                },
                {
                  "name": "Get Worker Pipeline Error Details",
                  "description": "Get the activity error details for the run ID of the worker pipeline called. Returns an array of all errors.",
                  "type": "AzureFunctionActivity",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": true
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "functionName": "GetActivityErrors",
                    "method": "POST",
                    "body": {
                      "value": "@concat('\n{\n    \"tenantId\": \"',variables('WorkerTenantId'),'\",\n    \"applicationId\": \"',variables('WorkerAppId'),'\",\n    \"authenticationKey\": \"',variables('WorkerAppSecret'),'\",\n    \"subscriptionId\": \"',variables('WorkerSubscriptionId'),'\",\n    \"resourceGroup\": \"',variables('WorkerResourceGroup'),'\",\n    \"factoryName\": \"',variables('WorkerDataFactoryName'),'\",\n    \"pipelineName\": \"',variables('WorkerPipelineName'),'\",\n    \"runId\": \"',variables('WorkerRunId'),'\"\n}')",
                      "type": "Expression"
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "FrameworkFunctions",
                    "type": "LinkedServiceReference"
                  }
                },
                {
                  "name": "Log Error Details",
                  "description": "Parses pipeline error details and persists them to the metadata database error log table.",
                  "type": "SqlServerStoredProcedure",
                  "dependsOn": [
                    {
                      "activity": "Get Worker Pipeline Error Details",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "storedProcedureName": "[procfwk].[SetErrorLogDetails]",
                    "storedProcedureParameters": {
                      "JsonErrorDetails": {
                        "value": {
                          "value": "@string(activity('Get Worker Pipeline Error Details').output)",
                          "type": "Expression"
                        },
                        "type": "String"
                      },
                      "LocalExecutionId": {
                        "value": {
                          "value": "@pipeline().parameters.executionId",
                          "type": "Expression"
                        },
                        "type": "Guid"
                      }
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "SupportDatabase",
                    "type": "LinkedServiceReference"
                  }
                }
              ]
            },
            {
              "value": "Cancelled",
              "activities": [
                {
                  "name": "Pipeline Status Cancelled",
                  "description": "Updates the current execution table with a pipeline status of cancelled if the function outcome is cancelled.",
                  "type": "SqlServerStoredProcedure",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "storedProcedureName": "[procfwk].[SetLogPipelineCancelled]",
                    "storedProcedureParameters": {
                      "ExecutionId": {
                        "value": {
                          "value": "@pipeline().parameters.executionId",
                          "type": "Expression"
                        },
                        "type": "Guid"
                      },
                      "PipelineId": {
                        "value": {
                          "value": "@pipeline().parameters.pipelineId",
                          "type": "Expression"
                        },
                        "type": "Int32"
                      },
                      "StageId": {
                        "value": {
                          "value": "@pipeline().parameters.stageId",
                          "type": "Expression"
                        },
                        "type": "Int32"
                      }
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "SupportDatabase",
                    "type": "LinkedServiceReference"
                  }
                }
              ]
            }
          ],
          "defaultActivities": [
            {
              "name": "Pipeline Status Unknown",
              "description": "Updates the current execution table with a pipeline status of unknown if the function returns an unexpected outcome.",
              "type": "SqlServerStoredProcedure",
              "dependsOn": [],
              "policy": {
                "timeout": "0.00:10:00",
                "retry": 0,
                "retryIntervalInSeconds": 30,
                "secureOutput": false,
                "secureInput": false
              },
              "userProperties": [],
              "typeProperties": {
                "storedProcedureName": "[procfwk].[SetLogPipelineUnknown]",
                "storedProcedureParameters": {
                  "ExecutionId": {
                    "value": {
                      "value": "@pipeline().parameters.executionId",
                      "type": "Expression"
                    },
                    "type": "Guid"
                  },
                  "PipelineId": {
                    "value": {
                      "value": "@pipeline().parameters.pipelineId",
                      "type": "Expression"
                    },
                    "type": "Int32"
                  },
                  "StageId": {
                    "value": {
                      "value": "@pipeline().parameters.stageId",
                      "type": "Expression"
                    },
                    "type": "Int32"
                  }
                }
              },
              "linkedServiceName": {
                "referenceName": "SupportDatabase",
                "type": "LinkedServiceReference"
              }
            }
          ]
        }
      },
      {
        "name": "Get Wait Duration",
        "description": "Return wait duration in seconds from database properties table to be used during each Until iteration when the Worker pipeline is still running.",
        "type": "Lookup",
        "dependsOn": [],
        "policy": {
          "timeout": "0.00:10:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureOutput": false,
          "secureInput": false
        },
        "userProperties": [],
        "typeProperties": {
          "source": {
            "type": "AzureSqlSource",
            "sqlReaderStoredProcedureName": "[procfwk].[GetPropertyValue]",
            "storedProcedureParameters": {
              "PropertyName": {
                "type": "String",
                "value": "PipelineStatusCheckDuration"
              }
            },
            "queryTimeout": "02:00:00",
            "partitionOption": "None"
          },
          "dataset": {
            "referenceName": "GetSetMetadata",
            "type": "DatasetReference"
          }
        }
      },
      {
        "name": "Set App Id",
        "description": "Set local variable from activity output once for value reuse in downstream activities.",
        "type": "SetVariable",
        "dependsOn": [
          {
            "activity": "Get Worker Authentication Details",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ],
        "userProperties": [],
        "typeProperties": {
          "variableName": "WorkerAppId",
          "value": {
            "value": "@activity('Get Worker Authentication Details').output.firstRow.AppId",
            "type": "Expression"
          }
        }
      },
      {
        "name": "Set App Secret",
        "description": "Set local variable from activity output once for value reuse in downstream activities.",
        "type": "SetVariable",
        "dependsOn": [
          {
            "activity": "Get Worker Authentication Details",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ],
        "userProperties": [],
        "typeProperties": {
          "variableName": "WorkerAppSecret",
          "value": {
            "value": "@activity('Get Worker Authentication Details').output.firstRow.AppSecret",
            "type": "Expression"
          }
        }
      },
      {
        "name": "Set Run Id",
        "description": "Set local variable from activity output once for value reuse in downstream activities.",
        "type": "SetVariable",
        "dependsOn": [
          {
            "activity": "Execute Worker Pipeline",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ],
        "userProperties": [],
        "typeProperties": {
          "variableName": "WorkerRunId",
          "value": {
            "value": "@activity('Execute Worker Pipeline').output.RunId",
            "type": "Expression"
          }
        }
      },
      {
        "name": "Get Worker Pipeline Details",
        "description": "Return none sensitive worker pipeline information for metadata database. Including target data factory, pipeline name and resource group.",
        "type": "Lookup",
        "dependsOn": [],
        "policy": {
          "timeout": "0.00:10:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureOutput": true,
          "secureInput": false
        },
        "userProperties": [],
        "typeProperties": {
          "source": {
            "type": "AzureSqlSource",
            "sqlReaderStoredProcedureName": "[procfwk].[GetWorkerPipelineDetails]",
            "storedProcedureParameters": {
              "ExecutionId": {
                "type": "Guid",
                "value": {
                  "value": "@pipeline().parameters.ExecutionId",
                  "type": "Expression"
                }
              },
              "PipelineId": {
                "type": "Int32",
                "value": {
                  "value": "@pipeline().parameters.pipelineId",
                  "type": "Expression"
                }
              },
              "StageId": {
                "type": "Int32",
                "value": {
                  "value": "@pipeline().parameters.stageId",
                  "type": "Expression"
                }
              }
            },
            "queryTimeout": "02:00:00",
            "partitionOption": "None"
          },
          "dataset": {
            "referenceName": "GetSetMetadata",
            "type": "DatasetReference"
          }
        }
      },
      {
        "name": "Set Tenant Id",
        "description": "Set local variable from activity output once for value reuse in downstream activities.",
        "type": "SetVariable",
        "dependsOn": [
          {
            "activity": "Get Worker Authentication Details",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ],
        "userProperties": [],
        "typeProperties": {
          "variableName": "WorkerTenantId",
          "value": {
            "value": "@activity('Get Worker Authentication Details').output.firstRow.TenantId",
            "type": "Expression"
          }
        }
      },
      {
        "name": "Set Subscription Id",
        "description": "Set local variable from activity output once for value reuse in downstream activities.",
        "type": "SetVariable",
        "dependsOn": [
          {
            "activity": "Get Worker Authentication Details",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ],
        "userProperties": [],
        "typeProperties": {
          "variableName": "WorkerSubscriptionId",
          "value": {
            "value": "@activity('Get Worker Authentication Details').output.firstRow.SubscriptionId",
            "type": "Expression"
          }
        }
      },
      {
        "name": "Set Pipeline Name",
        "description": "Set local variable from activity output once for value reuse in downstream activities.",
        "type": "SetVariable",
        "dependsOn": [
          {
            "activity": "Get Worker Pipeline Details",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ],
        "userProperties": [],
        "typeProperties": {
          "variableName": "WorkerPipelineName",
          "value": {
            "value": "@activity('Get Worker Pipeline Details').output.firstRow.PipelineName",
            "type": "Expression"
          }
        }
      },
      {
        "name": "Set Data Factory Name",
        "description": "Set local variable from activity output once for value reuse in downstream activities.",
        "type": "SetVariable",
        "dependsOn": [
          {
            "activity": "Get Worker Pipeline Details",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ],
        "userProperties": [],
        "typeProperties": {
          "variableName": "WorkerDataFactoryName",
          "value": {
            "value": "@activity('Get Worker Pipeline Details').output.firstRow.DataFactoryName",
            "type": "Expression"
          }
        }
      },
      {
        "name": "Set Resource Group",
        "description": "Set local variable from activity output once for value reuse in downstream activities.",
        "type": "SetVariable",
        "dependsOn": [
          {
            "activity": "Get Worker Pipeline Details",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ],
        "userProperties": [],
        "typeProperties": {
          "variableName": "WorkerResourceGroup",
          "value": {
            "value": "@activity('Get Worker Pipeline Details').output.firstRow.ResourceGroupName",
            "type": "Expression"
          }
        }
      },
      {
        "name": "Validate Pipeline",
        "description": "Query the target data factory and establish if the provided worker pipeline name is valid.",
        "type": "AzureFunctionActivity",
        "dependsOn": [
          {
            "activity": "Set Resource Group",
            "dependencyConditions": [
              "Succeeded"
            ]
          },
          {
            "activity": "Set Data Factory Name",
            "dependencyConditions": [
              "Succeeded"
            ]
          },
          {
            "activity": "Set Subscription Id",
            "dependencyConditions": [
              "Succeeded"
            ]
          },
          {
            "activity": "Set App Secret",
            "dependencyConditions": [
              "Succeeded"
            ]
          },
          {
            "activity": "Set App Id",
            "dependencyConditions": [
              "Succeeded"
            ]
          },
          {
            "activity": "Set Pipeline Name",
            "dependencyConditions": [
              "Succeeded"
            ]
          },
          {
            "activity": "Set Tenant Id",
            "dependencyConditions": [
              "Succeeded"
            ]
          },
          {
            "activity": "Log Pipeline Validating",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ],
        "policy": {
          "timeout": "0.00:10:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureOutput": false,
          "secureInput": true
        },
        "userProperties": [],
        "typeProperties": {
          "functionName": "ValidatePipeline",
          "method": "POST",
          "body": {
            "value": "@concat('\n{\n\t\"tenantId\": \"',variables('WorkerTenantId'),'\",\n\t\"applicationId\": \"',variables('WorkerAppId'),'\",\n\t\"authenticationKey\": \"',variables('WorkerAppSecret'),'\",\n\t\"subscriptionId\": \"',variables('WorkerSubscriptionId'),'\",\n\t\"resourceGroup\": \"',variables('WorkerResourceGroup'),'\",\n\t\"factoryName\": \"',variables('WorkerDataFactoryName'),'\",\n\t\"pipelineName\": \"',variables('WorkerPipelineName'),'\"\n}')",
            "type": "Expression"
          }
        },
        "linkedServiceName": {
          "referenceName": "FrameworkFunctions",
          "type": "LinkedServiceReference"
        }
      },
      {
        "name": "Is Target Worker Validate",
        "description": "True = the worker pipeline name is valid.\nFalse = the worker pipeline name is invalid. Raise an exception.",
        "type": "IfCondition",
        "dependsOn": [
          {
            "activity": "Validate Pipeline",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ],
        "userProperties": [],
        "typeProperties": {
          "expression": {
            "value": "@bool(activity('Validate Pipeline').output.PipelineExists)",
            "type": "Expression"
          },
          "ifFalseActivities": [
            {
              "name": "Throw Exception - Invalid Infant",
              "description": "Throw an exception with details about the invalid worker pipeline name.",
              "type": "ExecutePipeline",
              "dependsOn": [],
              "userProperties": [],
              "typeProperties": {
                "pipeline": {
                  "referenceName": "Throw Exception",
                  "type": "PipelineReference"
                },
                "waitOnCompletion": true,
                "parameters": {
                  "Message": {
                    "value": "@concat('Worker pipeline [',variables('WorkerPipelineName'),'] is not valid in target Data Factory [',variables('WorkerDataFactoryName'),']')",
                    "type": "Expression"
                  }
                }
              }
            },
            {
              "name": "Update Execution With Invalid Worker",
              "description": "Update the current execution table with an informed status for the worker pipeline that couldn't be executed.",
              "type": "SqlServerStoredProcedure",
              "dependsOn": [],
              "policy": {
                "timeout": "7.00:00:00",
                "retry": 0,
                "retryIntervalInSeconds": 30,
                "secureOutput": false,
                "secureInput": false
              },
              "userProperties": [],
              "typeProperties": {
                "storedProcedureName": "[procfwk].[SetLogActivityFailed]",
                "storedProcedureParameters": {
                  "CallingActivity": {
                    "value": "InvalidPipelineName",
                    "type": "String"
                  },
                  "ExecutionId": {
                    "value": {
                      "value": "@pipeline().parameters.ExecutionId",
                      "type": "Expression"
                    },
                    "type": "Guid"
                  },
                  "PipelineId": {
                    "value": {
                      "value": "@pipeline().parameters.pipelineId",
                      "type": "Expression"
                    },
                    "type": "Int32"
                  },
                  "StageId": {
                    "value": {
                      "value": "@pipeline().parameters.StageId",
                      "type": "Expression"
                    },
                    "type": "Int32"
                  }
                }
              },
              "linkedServiceName": {
                "referenceName": "SupportDatabase",
                "type": "LinkedServiceReference"
              }
            }
          ]
        }
      },
      {
        "name": "Log Validate Function Activity Failure",
        "description": "Handle true failures from calling out to the Azure Function and update the current execution table accordingly so a restart can occur.",
        "type": "SqlServerStoredProcedure",
        "dependsOn": [
          {
            "activity": "Validate Pipeline",
            "dependencyConditions": [
              "Failed"
            ]
          }
        ],
        "policy": {
          "timeout": "0.00:10:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureOutput": false,
          "secureInput": false
        },
        "userProperties": [],
        "typeProperties": {
          "storedProcedureName": "[procfwk].[SetLogActivityFailed]",
          "storedProcedureParameters": {
            "ExecutionId": {
              "value": {
                "value": "@pipeline().parameters.ExecutionId",
                "type": "Expression"
              },
              "type": "Guid"
            },
            "PipelineId": {
              "value": {
                "value": "@pipeline().parameters.pipelineId",
                "type": "Expression"
              },
              "type": "Int32"
            },
            "StageId": {
              "value": {
                "value": "@pipeline().parameters.StageId",
                "type": "Expression"
              },
              "type": "Int32"
            },
            "CallingActivity": {
              "value": "ValidatePipeline",
              "type": "String"
            }
          }
        },
        "linkedServiceName": {
          "referenceName": "SupportDatabase",
          "type": "LinkedServiceReference"
        }
      },
      {
        "name": "Log Pipeline Validating",
        "description": "Sets the current pipeline with a status of validating within the current execution database table.",
        "type": "SqlServerStoredProcedure",
        "dependsOn": [],
        "policy": {
          "timeout": "0.00:10:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureOutput": false,
          "secureInput": false
        },
        "userProperties": [],
        "typeProperties": {
          "storedProcedureName": "[procfwk].[SetLogPipelineValidating]",
          "storedProcedureParameters": {
            "ExecutionId": {
              "value": {
                "value": "@pipeline().parameters.ExecutionId",
                "type": "Expression"
              },
              "type": "Guid"
            },
            "PipelineId": {
              "value": {
                "value": "@pipeline().parameters.pipelineId",
                "type": "Expression"
              },
              "type": "Int32"
            },
            "StageId": {
              "value": {
                "value": "@pipeline().parameters.StageId",
                "type": "Expression"
              },
              "type": "Int32"
            }
          }
        },
        "linkedServiceName": {
          "referenceName": "SupportDatabase",
          "type": "LinkedServiceReference"
        }
      }
    ],
    "parameters": {
      "executionId": {
        "type": "string"
      },
      "stageId": {
        "type": "int"
      },
      "pipelineId": {
        "type": "int"
      }
    },
    "variables": {
      "WorkerPipelineState": {
        "type": "Boolean"
      },
      "WorkerAppId": {
        "type": "String"
      },
      "WorkerAppSecret": {
        "type": "String"
      },
      "WorkerRunId": {
        "type": "String"
      },
      "WorkerTenantId": {
        "type": "String"
      },
      "WorkerSubscriptionId": {
        "type": "String"
      },
      "WorkerPipelineName": {
        "type": "String"
      },
      "WorkerDataFactoryName": {
        "type": "String"
      },
      "WorkerResourceGroup": {
        "type": "String"
      }
    },
    "folder": {
      "name": "_ProcFwk"
    },
    "annotations": [
      "procfwk",
      "Infant"
    ]
  }
}